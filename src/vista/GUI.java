/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;
import javax.swing.JOptionPane;
import modelo.Repositorio;
import modelo.ZonasTrabajo;

/**
 *
 * @author Nico
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }
    
    Repositorio repositorio = new Repositorio(); //Nuevo Repositorio
    ZonasTrabajo zonas; //Zonas de trabajo
    boolean init = false; //boolean para comprobar si ya se inicio el gitInit
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        canvas1 = new java.awt.Canvas();
        botonStatusWorkspace = new javax.swing.JButton();
        botonStatusIndex = new javax.swing.JButton();
        botonStatusLocalRepository = new javax.swing.JButton();
        botonStatusRemoteRepository = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        botonGitInit = new javax.swing.JButton();
        botonGitAdd = new javax.swing.JButton();
        botonGitCommit = new javax.swing.JButton();
        botonNuevoArchivo = new javax.swing.JButton();
        botonGitPull = new javax.swing.JButton();
        botonGitPush = new javax.swing.JButton();
        d1 = new javax.swing.JLabel();
        d2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        mostrar = new javax.swing.JTextArea();
        mostrarT = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));

        jPanel2.setBackground(new java.awt.Color(0, 153, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Workspace");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Index");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Local Repository");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Remote Repository");

        botonStatusWorkspace.setText("Status");
        botonStatusWorkspace.setToolTipText("");
        botonStatusWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStatusWorkspaceActionPerformed(evt);
            }
        });

        botonStatusIndex.setText("Status");
        botonStatusIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStatusIndexActionPerformed(evt);
            }
        });

        botonStatusLocalRepository.setText("Status");
        botonStatusLocalRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStatusLocalRepositoryActionPerformed(evt);
            }
        });

        botonStatusRemoteRepository.setText("Status");
        botonStatusRemoteRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStatusRemoteRepositoryActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 153, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(204, 204, 204)));

        botonGitInit.setText("Init");
        botonGitInit.setBorderPainted(false);
        botonGitInit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonGitInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGitInitActionPerformed(evt);
            }
        });

        botonGitAdd.setText("add");
        botonGitAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGitAddActionPerformed(evt);
            }
        });

        botonGitCommit.setText("commit");
        botonGitCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGitCommitActionPerformed(evt);
            }
        });

        botonNuevoArchivo.setText("Nuevo Archivo");
        botonNuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoArchivoActionPerformed(evt);
            }
        });

        botonGitPull.setText("pull");
        botonGitPull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGitPullActionPerformed(evt);
            }
        });

        botonGitPush.setText("push");
        botonGitPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGitPushActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonGitInit, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonNuevoArchivo))
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonGitAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonGitPull, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonGitCommit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonGitPush, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonGitInit)
                    .addComponent(botonGitAdd)
                    .addComponent(botonGitCommit))
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonNuevoArchivo)
                    .addComponent(botonGitPull)
                    .addComponent(botonGitPush))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        d1.setText("    ");

        d2.setText("    ");

        mostrar.setColumns(20);
        mostrar.setRows(5);
        jScrollPane6.setViewportView(mostrar);

        mostrarT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mostrarT.setText("   ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(botonStatusWorkspace))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(botonStatusIndex)
                        .addGap(122, 122, 122))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel3)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(botonStatusLocalRepository)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonStatusRemoteRepository)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mostrarT, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addGap(69, 69, 69))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(d2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(d1))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonStatusWorkspace)
                    .addComponent(botonStatusIndex)
                    .addComponent(botonStatusLocalRepository)
                    .addComponent(botonStatusRemoteRepository))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(d1)
                        .addGap(36, 36, 36)
                        .addComponent(d2)
                        .addGap(131, 131, 131)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mostrarT)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane6)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(76, 76, 76))))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("GIT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(347, 347, 347))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void botonStatusWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStatusWorkspaceActionPerformed
        // TODO add your handling code here:   
        mostrar.setText(""); 
        if(init){
            if(repositorio.zonas.archivosWorkspace.isEmpty()){
                mostrarT.setText("");
                JOptionPane.showMessageDialog(null, "No hay archivos en el Workspace", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                mostrarT.setText("Archivos en el Workspace");
                String elementos = "";          
                for(int i = 0; i < repositorio.zonas.archivosWorkspace.size(); i++){
                    elementos = elementos + " " + (repositorio.zonas.archivosWorkspace.get(i).nombre) + "\n";
                }
                mostrar.setText(elementos);
            } 
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }               
    }//GEN-LAST:event_botonStatusWorkspaceActionPerformed

    private void botonStatusLocalRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStatusLocalRepositoryActionPerformed
        // TODO add your handling code here:  
        mostrar.setText(""); 
        if(init){
            if(repositorio.zonas.commitsLocalRepository.isEmpty()){
                mostrarT.setText("");
                JOptionPane.showMessageDialog(null, "No hay commits en el Local Repository", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                mostrarT.setText("Commits en el Local Repository");    
                String elementos = "";
                for(int i = 0; i < repositorio.zonas.commitsLocalRepository.size(); i++){
                    elementos = elementos + "- " + (repositorio.zonas.commitsLocalRepository.get(i).archivos).get(i).nombre + " " + "\"" + repositorio.zonas.commitsLocalRepository.get(i).mensaje + "\""  + "\n";
                }
                mostrar.setText(elementos);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }        
    }//GEN-LAST:event_botonStatusLocalRepositoryActionPerformed

    private void botonStatusRemoteRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStatusRemoteRepositoryActionPerformed
        // TODO add your handling code here:  
        mostrar.setText(""); 
        if(init){
            if(repositorio.zonas.archivosRemoteRepository.isEmpty()){
                mostrarT.setText("");
                JOptionPane.showMessageDialog(null, "No hay commits en el Remote Repository", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                mostrarT.setText("Commits en el Remote Repository");                
                String elementos = "";
                for(int i = 0; i < repositorio.zonas.archivosRemoteRepository.size(); i++){
                    elementos = elementos + "- " + (repositorio.zonas.archivosRemoteRepository.get(i).archivos).get(i).nombre + " " + "\"" + repositorio.zonas.archivosRemoteRepository.get(i).mensaje + "\"" + "\n";
                }
                mostrar.setText(elementos);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }       
    }//GEN-LAST:event_botonStatusRemoteRepositoryActionPerformed

    private void botonGitAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGitAddActionPerformed
        // TODO add your handling code here:        
        if(init){
            String[] opciones = {"Si, deseo agregar todos los archivos", "No, quiero agregar solo uno"};
            int respuesta = JOptionPane.showOptionDialog(null, "¿Desea agregar todos los archivos al Index?", "Git Add", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            int aux = 0;
            if(repositorio.zonas.archivosWorkspace.size() > 0){
                if(respuesta == JOptionPane.YES_OPTION){
                    repositorio.gitAddAll(repositorio, repositorio.zonas.archivosWorkspace);
                }
                else if (respuesta == JOptionPane.NO_OPTION){
                    String nombreArchivo = (String)JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo: ", "Git Add", JOptionPane.PLAIN_MESSAGE, null, null, "");
                    if((nombreArchivo != null) && (nombreArchivo.length() > 0)){
                        for(int i = 0; i < repositorio.zonas.archivosWorkspace.size(); i++){
                            if((repositorio.zonas.archivosWorkspace.get(i).nombre).contains(nombreArchivo)){
                                repositorio.gitAdd(repositorio, repositorio.zonas.archivosWorkspace, nombreArchivo);
                                aux = 1;
                            }
                        }
                        if(aux == 0){
                            JOptionPane.showMessageDialog(null, "No existe el archivo especificado", "Error", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Debe introducir un nombre de un archivo", "Error", JOptionPane.INFORMATION_MESSAGE);  
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "No escogio ninguna opcion", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No hay archivos en el Workspace", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }                    
    }//GEN-LAST:event_botonGitAddActionPerformed

    private void botonNuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoArchivoActionPerformed
        // TODO add your handling code here:
        if(init){
            //JOptionPane.showMessageDialog(null, "Introduzca los datos del archivo de texto", "Nuevo Archivo", JOptionPane.INFORMATION_MESSAGE);
            String nombreArchivo = (String)JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo: ", "Crear Archivo", JOptionPane.PLAIN_MESSAGE, null, null, "");
            if((nombreArchivo != null) && (nombreArchivo.length() > 0)){
                String contenidoArchivo = (String)JOptionPane.showInputDialog(null, "Ingrese el contenido del archivo: ", "Crear Archivo", JOptionPane.PLAIN_MESSAGE, null, null, "");
                if((contenidoArchivo != null) && (contenidoArchivo.length() > 0)){
                    repositorio.crearArchivo(repositorio, nombreArchivo, contenidoArchivo);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe introducir un contenido para el archivo", "Error", JOptionPane.INFORMATION_MESSAGE);                
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Debe introducir un nombre para el archivo", "Error", JOptionPane.INFORMATION_MESSAGE);
            }    
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }             
    }//GEN-LAST:event_botonNuevoArchivoActionPerformed

    private void botonGitPullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGitPullActionPerformed
        // TODO add your handling code here:
        if(init){
            if(repositorio.zonas.archivosRemoteRepository.size() > 0){
            repositorio.gitPull();
            JOptionPane.showMessageDialog(null, "Se realizo el Pull", null, JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "Necesita tener commits en el Remote Repository para realizar un Pull", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }        
    }//GEN-LAST:event_botonGitPullActionPerformed

    private void botonGitInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGitInitActionPerformed
        // TODO add your handling code here:               
        if(init){
            JOptionPane.showMessageDialog(null, "Ya le asigno los datos al repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            //JOptionPane.showMessageDialog(null, "Introduzca los datos del repositorio", "Git Init", JOptionPane.INFORMATION_MESSAGE);
            String nombreRepo = (String)JOptionPane.showInputDialog(null, "Ingrese el nombre del repositorio: ", "Git Init", JOptionPane.PLAIN_MESSAGE, null, null, "");
            if((nombreRepo != null) && (nombreRepo.length() > 0)){
                String autorRepo = (String)JOptionPane.showInputDialog(null, "Ingrese el autor del repositorio: ", "Git Init", JOptionPane.PLAIN_MESSAGE, null, null, "");
                if((autorRepo != null) && (autorRepo.length() > 0)){
                    repositorio.gitInit(nombreRepo, autorRepo);
                    init = true;
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe introducir un nombre de autor para el repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);                   
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Debe introducir un nombre para el repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }                      
    }//GEN-LAST:event_botonGitInitActionPerformed

    private void botonStatusIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStatusIndexActionPerformed
        // TODO add your handling code here:   
        mostrar.setText("");
        if(init){
            if(repositorio.zonas.archivosIndex.isEmpty()){
                mostrarT.setText("");
                JOptionPane.showMessageDialog(null, "No hay archivos en el Index", "Error", JOptionPane.INFORMATION_MESSAGE);      
            }
            else{
                mostrarT.setText("Archivos en el Index");
                mostrar.setText("");                
                String elementos = "";
                for(int i = 0; i < repositorio.zonas.archivosIndex.size(); i++){
                    elementos = elementos + " " + repositorio.zonas.archivosIndex.get(i).nombre;
                }
                mostrar.setText(elementos);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }          
    }//GEN-LAST:event_botonStatusIndexActionPerformed

    private void botonGitCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGitCommitActionPerformed
        // TODO add your handling code here:       
        if(init){
            if(repositorio.zonas.archivosIndex.size() > 0 && repositorio.zonas.commitsLocalRepository.size() <= repositorio.zonas.archivosIndex.size()){
                //JOptionPane.showMessageDialog(null, "Introduzca los datos del commit", "Git Commit", JOptionPane.INFORMATION_MESSAGE);
                String autorCommit = (String)JOptionPane.showInputDialog(null, "Ingrese el nombre del autor del commit: ", "Git Commit", JOptionPane.PLAIN_MESSAGE, null, null, "");
                if((autorCommit != null) && (autorCommit.length() > 0)){
                    String mensajeCommit = (String)JOptionPane.showInputDialog(null, "Ingrese el mensaje del commit: ", "Git Commit", JOptionPane.PLAIN_MESSAGE, null, null, "");
                    if((mensajeCommit != null) && (mensajeCommit.length() > 0)){
                        repositorio.gitCommit(repositorio, autorCommit, mensajeCommit, repositorio.zonas.archivosIndex);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Debe introducir un mensaje para el commit", "Error", JOptionPane.INFORMATION_MESSAGE);                
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe introducir un autor para el commit", "Error", JOptionPane.INFORMATION_MESSAGE);
                }    
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }        
    }//GEN-LAST:event_botonGitCommitActionPerformed

    private void botonGitPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGitPushActionPerformed
        // TODO add your handling code here:       
        if(init){
            if(repositorio.zonas.commitsLocalRepository.size() > 0){
                repositorio.gitPush();
                JOptionPane.showMessageDialog(null, "Se realizo el Push", null, JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "Necesita tener commits en el Local Repository para realizar un Push", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Antes de realizar esta funcionalidad necesita ingresar los datos del repositorio", "Error", JOptionPane.INFORMATION_MESSAGE);
        }    
    }//GEN-LAST:event_botonGitPushActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
 
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGitAdd;
    private javax.swing.JButton botonGitCommit;
    private javax.swing.JButton botonGitInit;
    private javax.swing.JButton botonGitPull;
    private javax.swing.JButton botonGitPush;
    private javax.swing.JButton botonNuevoArchivo;
    private javax.swing.JButton botonStatusIndex;
    private javax.swing.JButton botonStatusLocalRepository;
    private javax.swing.JButton botonStatusRemoteRepository;
    private javax.swing.JButton botonStatusWorkspace;
    private java.awt.Canvas canvas1;
    private javax.swing.JLabel d1;
    private javax.swing.JLabel d2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea mostrar;
    private javax.swing.JLabel mostrarT;
    // End of variables declaration//GEN-END:variables
}
